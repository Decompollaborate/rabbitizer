#!/usr/bin/env python3

# SPDX-FileCopyrightText: Â© 2022 Decompollaborate
# SPDX-License-Identifier: MIT

from __future__ import annotations

from .Enum import Enum
from .InstrCategory import InstrCategory


class Instruction:
    rs: Enum
    rt: Enum
    rd: Enum
    sa: int

    uniqueId: Enum

    vram: int = 0
    inHandwrittenFunction: bool = False


    def __init__(self, word: int, vram: int=0, category: Enum=InstrCategory.CPU) -> None: ...

    def getRaw(self) -> int: ...
    def getImmediate(self) -> int: ...
    def getProcessedImmediate(self) -> int: ...
    def getInstrIndexAsVram(self) -> int: ...
    def getBranchOffset(self) -> int: ...
    def getGenericBranchOffset(self, currentVram: int) -> int: ...
    def getOpcodeName(self) -> str: ...

    def blankOut(self) -> None: ...

    def isImplemented(self) -> bool: ...
    def isLikelyHandwritten(self) -> bool: ...
    def isNop(self) -> bool: ...
    def isUnconditionalBranch(self) -> bool: ...
    def isJrRa(self) -> bool: ...
    def isJrNotRa(self) -> bool: ...
    def hasDelaySlot(self) -> bool: ...
    def mapInstrToType(self) -> str|None: ...

    def sameOpcode(self, other: Instruction) -> bool: ...
    def sameOpcodeButDifferentArguments(self, other: Instruction) -> bool: ...

    def isValid(self) -> bool: ...

    def isUnknownType(self) -> bool: ...
    def isJType(self) -> bool: ...
    def isIType(self) -> bool: ...
    def isRType(self) -> bool: ...
    def isRegimmType(self) -> bool: ...
    def isBranch(self) -> bool: ...
    def isBranchLikely(self) -> bool: ...
    def isJump(self) -> bool: ...
    def isTrap(self) -> bool: ...
    def isFloat(self) -> bool: ...
    def isDouble(self) -> bool: ...
    def isUnsigned(self) -> bool: ...
    def modifiesRt(self) -> bool: ...
    def modifiesRd(self) -> bool: ...
    def notEmitedByCompilers(self) -> bool: ...
    def canBeHi(self) -> bool: ...
    def canBeLo(self) -> bool: ...
    def doesLink(self) -> bool: ...
    def doesDereference(self) -> bool: ...
    def doesLoad(self) -> bool: ...
    def doesStore(self) -> bool: ...
    def maybeIsMove(self) -> bool: ...
    def isPseudo(self) -> bool: ...

    def disassemble(self, immOverride: str|None=None, extraLJust: int=0) -> str: ...

    def __reduce__(self) -> tuple: ...

    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
