#!/usr/bin/env python3

# SPDX-FileCopyrightText: Â© 2022 Decompollaborate
# SPDX-License-Identifier: MIT

from __future__ import annotations

from .Enum import Enum


class Instruction:
    opcode: int
    rs: int
    rt: int
    rd: int
    sa: int
    function: int

    uniqueId: Enum

    vram: int = 0
    inHandwrittenFunction: bool = False

    instr: int
    immediate: int

    def __init__(self, word: int) -> None: ...

    def getRaw(self) -> int: ...
    def getImmediate(self) -> int: ...
    def getInstrIndexAsVram(self) -> int: ...
    def getBranchOffset(self) -> int: ...
    def getGenericBranchOffset(self, currentVram: int) -> int: ...

    def blankOut(self) -> None: ...

    def isImplemented(self) -> bool: ...
    def isLikelyHandwritten(self) -> bool: ...
    def isNop(self) -> bool: ...
    def isUnconditionalBranch(self) -> bool: ...
    def isJrRa(self) -> bool: ...
    def isJrNotRa(self) -> bool: ...
    def mapInstrToType(self) -> str|None: ...

    def sameOpcode(self, other: Instruction) -> bool: ...
    def sameOpcodeButDifferentArguments(self, other: Instruction) -> bool: ...

    def isUnknownType(self) -> bool: ...
    def isJType(self) -> bool: ...
    def isIType(self) -> bool: ...
    def isRType(self) -> bool: ...
    def isRegimmType(self) -> bool: ...
    def isBranch(self) -> bool: ...
    def isBranchLikely(self) -> bool: ...
    def isJump(self) -> bool: ...
    def isTrap(self) -> bool: ...
    def isFloat(self) -> bool: ...
    def isFloatInstruction(self) -> bool: ...
    def isDouble(self) -> bool: ...
    def isDoubleInstruction(self) -> bool: ...
    def isUnsigned(self) -> bool: ...
    def modifiesRt(self) -> bool: ...
    def modifiesRd(self) -> bool: ...
    def notEmitedByCompilers(self) -> bool: ...
    def isHiPair(self) -> bool: ...
    def isLoPair(self) -> bool: ...
    def doesLink(self) -> bool: ...
    def doesDereference(self) -> bool: ...

    def disassemble(self, immOverride: str|None=None, extraLJust: int=0) -> str: ...

    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...


class _RabbitizerConfig:
    regNames_namedRegisters: bool = True
    regNames_gprAbiNames: int
    regNames_fprAbiNames: int
    regNames_userFpcCsr: bool = True
    regNames_vr4300Cop0NamedRegisters: bool = True
    regNames_vr4300RspCop0NamedRegisters: bool = True

    pseudos_enablePseudos: bool = True
    pseudos_pseudoBeqz: bool = True
    pseudos_pseudoBnez: bool = True
    pseudos_pseudoB: bool = True
    pseudos_pseudoMove: bool = True
    pseudos_pseudoNot: bool = True
    pseudos_pseudoNegu: bool = True

    toolchainTweaks_sn64DivFix: bool = False
    toolchainTweaks_treatJAsUnconditionalBranch: bool = False

    misc_opcodeLJust: int = 11
    misc_unknownInstrComment: bool = True

config: _RabbitizerConfig
