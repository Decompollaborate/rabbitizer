name: Build and upload Rust crate

# Build on every branch push, tag push, and pull request change:
on: [push, pull_request]

env:
  RUSTFLAGS: "-D warnings"
  # RUSTDOCFLAGS: "-D warnings"

jobs:
  check_fmt:
    name: Check format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Check format
        run: cargo fmt --check

  check_clippy:
    name: Check clippy - no features
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup clippy
        run: rustup component add clippy

      - name: Run clippy
        run: cargo clippy -p rabbitizer --all-targets --no-default-features

  check_clippy_all_features:
    name: Check clippy - features- all
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup clippy
        run: rustup component add clippy

      - name: Run clippy
        run: cargo clippy -p rabbitizer --all-targets --all-features

  check_doc:
    name: Check doc
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run doc
        run: cargo doc

  run_tests:
    name: Run tests - No features
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features

  run_tests_mips_2:
    name: Run tests - MIPS II
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F MIPS_II

  run_tests_mips_3:
    name: Run tests - MIPS III
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F MIPS_III

  run_tests_mips_4:
    name: Run tests - MIPS IV
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F MIPS_IV

  run_tests_ext_rsp:
    name: Run tests - Extension RSP
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F RSP

  run_tests_ext_r3000gte:
    name: Run tests - Extension R3000GTE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F R3000GTE

  run_tests_ext_r4000allegrex:
    name: Run tests - Extension R4000ALLEGREX
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F R4000ALLEGREX

  run_tests_ext_r5900ee:
    name: Run tests - Extension R5900EE
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F R5900EE

  run_tests_all_extensions:
    name: Run tests - All extensions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F all_extensions

  run_tests_all_gated_extensions:
    name: Run tests - All extensions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F all_gated_extensions

  test_bin_disasmdis:
    name: Run tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo run -p rab-disasmdis 12345678

  msrv:
    name: Check MSRV is correct
    runs-on: ubuntu-latest
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup MSRV checker
        uses: taiki-e/install-action@cargo-hack

      - name: Run MSRV checker
        run: cargo hack check --rust-version --workspace --all-targets --ignore-private

  msrv_all_features:
    name: Check MSRV is correct for all features
    runs-on: ubuntu-latest
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup MSRV checker
        uses: taiki-e/install-action@cargo-hack

      - name: Run MSRV checker
        run: cargo hack check --rust-version --workspace --all-targets --ignore-private --all-features

  publish_rabbitizer:
    name: Publish crate
    runs-on: ubuntu-latest
    needs:
      - check_fmt
      - check_clippy
      - check_clippy_all_features
      - check_doc
      - run_tests
      - run_tests_all_extensions
      - run_tests_all_gated_extensions
      - test_bin_disasmdis
      - msrv
      - msrv_all_features

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Rust package
        run: cargo build --release --workspace

      - name: Publish rabbitizer dry run
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
        run: cargo publish -p rabbitizer --dry-run

      - name: Upload rabbitizer crate
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: cargo publish -p rabbitizer --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Upload rab-disasmdis crate
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: cargo publish -p rab-disasmdis --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  github_binary_release:
    name: Github binary release for ${{ matrix.binaries.package }} (${{ matrix.builder.target }})
    runs-on: ${{ matrix.builder.runner }}
    needs:
      - check_fmt
      - check_clippy
      - check_clippy_all_features
      - check_doc
      - run_tests
      - run_tests_all_extensions
      - run_tests_all_gated_extensions
      - test_bin_disasmdis
      - msrv
      - msrv_all_features

    strategy:
      fail-fast: false
      matrix:
        builder: [
          {
            name: windows,
            target: x86_64-pc-windows-gnu,
            runner: windows-2019,
            cp_cmd: Copy-Item,
          },
          {
            name: windows,
            target: x86_64-pc-windows-msvc,
            runner: windows-2019,
            cp_cmd: Copy-Item,
          },
          {
            name: mac,
            target: x86_64-apple-darwin,
            runner: macos-12,
            cp_cmd: cp,
          },
          {
            name: mac,
            target: aarch64-apple-darwin,
            runner: macos-14, # ARM
            cp_cmd: cp,
          },
          {
            name: linux,
            target: x86_64-unknown-linux-musl,
            runner: ubuntu-22.04,
            cp_cmd: cp,
          },
          {
            name: linux,
            target: x86_64-unknown-linux-gnu,
            runner: ubuntu-22.04,
            cp_cmd: cp,
          },
        ]
        binaries: [
          {
            package: rab-disasmdis,
          },
        ]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.builder.target }}

      - name: Build cli
        run: cargo build --release --package ${{ matrix.binaries.package }} --target ${{ matrix.builder.target }}

      - name: Move files for packaging
        run: |
          mkdir -p package/
          ${{ matrix.builder.cp_cmd }} target/${{ matrix.builder.target }}/release/${{ matrix.binaries.package }} package/
          ${{ matrix.builder.cp_cmd }} LICENSE package/${{ matrix.binaries.package }}.LICENSE
          ${{ matrix.builder.cp_cmd }} src/${{ matrix.binaries.package }}/README.md package/${{ matrix.binaries.package }}.README.md
          ${{ matrix.builder.cp_cmd }} README.md package/rabbitizer.README.md
          ${{ matrix.builder.cp_cmd }} CHANGELOG.md package/rabbitizer.CHANGELOG.md

      - name: Package .tar.gz
        run: |
          cd package/ && tar -czf ../${{ matrix.binaries.package }}-${{ matrix.builder.target }}.tar.gz *

      - name: Upload .tar.gz artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binaries.package }}-${{ matrix.builder.target }}
          path: |
            ${{ matrix.binaries.package }}-${{ matrix.builder.target }}.tar.gz
          if-no-files-found: error

      - name: Publish .tar.gz release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ matrix.binaries.package }}-${{ matrix.builder.target }}.tar.gz
