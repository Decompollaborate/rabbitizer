name: Build and upload Rust crate

# Build on every branch push, tag push, and pull request change:
on: [push, pull_request]

env:
  RUSTFLAGS: "-D warnings"
  # RUSTDOCFLAGS: "-D warnings"

jobs:
  check_fmt:
    name: Check format
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Check format
        run: cargo fmt --check

  check_clippy:
    name: Check clippy - no features
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup clippy
        run: rustup component add clippy

      - name: Run clippy
        run: cargo clippy -p rabbitizer --all-targets --no-default-features

  check_clippy_all_features:
    name: Check clippy - features- all
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Setup clippy
        run: rustup component add clippy

      - name: Run clippy
        run: cargo clippy -p rabbitizer --all-targets --all-features

  check_doc:
    name: Check doc
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run doc
        run: cargo doc

  run_tests:
    name: Run tests - No features
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features

  run_tests_mips_2:
    name: Run tests - MIPS II
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F MIPS_II

  run_tests_mips_3:
    name: Run tests - MIPS III
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F MIPS_III

  run_tests_mips_4:
    name: Run tests - MIPS IV
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F MIPS_IV

  run_tests_ext_rsp:
    name: Run tests - Extension RSP
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F RSP

  run_tests_ext_r3000gte:
    name: Run tests - Extension R3000GTE
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F R3000GTE

  run_tests_ext_r4000allegrex:
    name: Run tests - Extension R4000ALLEGREX
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F R4000ALLEGREX

  run_tests_ext_r5900ee:
    name: Run tests - Extension R5900EE
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F R5900EE

  run_tests_all_extensions:
    name: Run tests - All extensions
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F all_extensions

  run_tests_all_gated_extensions:
    name: Run tests - All extensions
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo test -p rabbitizer --no-default-features -F all_gated_extensions

  test_bin_disasmdis:
    name: Run tests
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run tests
        run: cargo run -p rab-disasmdis 12345678

  msrv:
    name: Check MSRV is correct
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup MSRV checker
        uses: taiki-e/install-action@cargo-hack

      - name: Run MSRV checker
        run: cargo hack check --rust-version --workspace --all-targets --ignore-private

  msrv_all_features:
    name: Check MSRV is correct for all features
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup MSRV checker
        uses: taiki-e/install-action@cargo-hack

      - name: Run MSRV checker
        run: cargo hack check --rust-version --workspace --all-targets --ignore-private --all-features

  build_rust:
    name: Build Rust stuff and run Rust tests
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout reposistory
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Rust package
        run: cargo build --release --workspace

      - name: Publish dry run
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
        run: cargo publish -p rabbitizer --dry-run

      - name: Upload crate
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: cargo publish -p rabbitizer --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
