/* SPDX-FileCopyrightText: Â© 2024-2025 Decompollaborate */
/* SPDX-License-Identifier: MIT */

#define HASH #
#define HASH_EXPANSION(x) x
#define SPECIAL_RS_TAG(...) HASH_EXPANSION(HASH)[__VA_ARGS__]


#define __IMPL_RAB_DEF_OPCODE(prefix, cat, case_bits, name, altname, isa_version_min, isa_exten, extra_expr, ...) \
    { \
        table[ Opcode::prefix##_##name as usize] = OpcodeDescriptor { \
            __VA_ARGS__, \
            ..OpcodeDescriptor::new( Opcode::prefix##_##name, OpcodeCategory :: cat, case_bits, #altname, isa_version_min, isa_exten) \
        }; \
    }


#define RAB_DEF_OPCODE_MIPS1(prefix, cat, case_bits, name, ...) \
    __IMPL_RAB_DEF_OPCODE(prefix, cat, case_bits, name, name, IsaVersion::MIPS_I, None, , __VA_ARGS__)

#define RAB_DEF_OPCODE_MIPS1_ALTNAME(prefix, cat, case_bits, name, altname, ...) \
    __IMPL_RAB_DEF_OPCODE(prefix, cat, case_bits, name, altname, IsaVersion::MIPS_I, None, , __VA_ARGS__)

#define RAB_DEF_OPCODE_MIPS1_PSEUDO(prefix, cat, case_bits, name, ...) \
    __IMPL_RAB_DEF_OPCODE(prefix, cat, case_bits, name, name, IsaVersion::MIPS_I, None, , __VA_ARGS__, is_pseudo: true)


#define RAB_DEF_OPCODE(prefix, cat, case_bits, name, isa_version_min, ...) \
    SPECIAL_RS_TAG(cfg(feature = #isa_version_min )) \
    __IMPL_RAB_DEF_OPCODE(prefix, cat, case_bits, name, name, IsaVersion:: isa_version_min, None, , __VA_ARGS__)

#define RAB_DEF_OPCODE_ALTNAME(prefix, cat, case_bits, name, altname, isa_version_min, ...) \
    SPECIAL_RS_TAG(cfg(feature = #isa_version_min )) \
    __IMPL_RAB_DEF_OPCODE(prefix, cat, case_bits, name, altname, IsaVersion:: isa_version_min, None, , __VA_ARGS__)

#define RAB_DEF_OPCODE_PSEUDO(prefix, cat, case_bits, name, isa_version_min, ...) \
    SPECIAL_RS_TAG(cfg(feature = #isa_version_min )) \
    __IMPL_RAB_DEF_OPCODE(prefix, cat, case_bits, name, name, IsaVersion:: isa_version_min, None, , __VA_ARGS__, is_pseudo: true)


#define RAB_DEF_OPCODE_EXT(prefix, cat, case_bits, name, isa_exten, ...) \
    SPECIAL_RS_TAG(cfg(feature = #isa_exten )) \
    __IMPL_RAB_DEF_OPCODE(prefix, cat, case_bits, name, name, IsaVersion::EXTENSION, Some(IsaExtension:: isa_exten ), , __VA_ARGS__)

#define RAB_DEF_OPCODE_EXT_ALTNAME(prefix, cat, case_bits, name, altname, isa_exten, ...) \
    SPECIAL_RS_TAG(cfg(feature = #isa_exten )) \
    __IMPL_RAB_DEF_OPCODE(prefix, cat, case_bits, name, altname, IsaVersion::EXTENSION, Some(IsaExtension:: isa_exten ), , __VA_ARGS__)

#define RAB_DEF_OPCODE_EXT_GATED(prefix, cat, case_bits, name, isa_exten, gate, ...) \
    SPECIAL_RS_TAG(cfg(feature = #gate )) \
    __IMPL_RAB_DEF_OPCODE(prefix, cat, case_bits, name, name, IsaVersion::EXTENSION, Some(IsaExtension:: isa_exten ), gate, __VA_ARGS__)

#define RAB_DEF_OPCODE_EXT_REMOVED(case_bits, prefix, name, isa_exten)


#define RAB_DEF_OPCODE_REDIRECT(case_bits, prefix, kind)


use crate::access_type::AccessType;
SPECIAL_RS_TAG(cfg(feature = "R5900EE"))
use crate::instr::InstrSuffix;
use crate::instr::InstrType;
SPECIAL_RS_TAG(cfg(any(
    feature = "RSP",
    feature = "R3000GTE",
    feature = "R4000ALLEGREX",
    feature = "R5900EE",
)))
use crate::isa::IsaExtension;
use crate::isa::IsaVersion;
use crate::opcodes::{Opcode, OpcodeCategory, OpcodeDescriptor, OPCODE_COUNT};
use crate::operands::Operand;
pub static OPCODES: [OpcodeDescriptor; OPCODE_COUNT] = {
    let mut table = [OpcodeDescriptor::default(); OPCODE_COUNT];

    #include "Opcode.inc"

    table
};


#undef __IMPL_RAB_DEF_OPCODE

#undef RAB_DEF_OPCODE
#undef RAB_DEF_OPCODE_ALTNAME
#undef RAB_DEF_OPCODE_PSEUDO

#undef RAB_DEF_OPCODE_MIPS1
#undef RAB_DEF_OPCODE_MIPS1_ALTNAME
#undef RAB_DEF_OPCODE_MIPS1_PSEUDO

#undef RAB_DEF_OPCODE_EXT
#undef RAB_DEF_OPCODE_EXT_ALTNAME
#undef RAB_DEF_OPCODE_EXT_GATED
#undef RAB_DEF_OPCODE_EXT_REMOVED

#undef RAB_DEF_OPCODE_REDIRECT

SPECIAL_RS_TAG(cfg(test))
mod tests {
    use super::*;

    SPECIAL_RS_TAG(test)
    fn check_descriptor_valid() {
        for x in OPCODES {
            x.check_valid_entry();
        }
    }
}
