/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

#define HASH #
#define HASH_EXPANSION(x) x
#define SPECIAL_RS_TAG(...) HASH_EXPANSION(HASH)[__VA_ARGS__]

#define RAB_DEF_OPCODE_ALTNAME(prefix, case_bits, name, altname, isa_version_min, isa_exten, ...) \
    table[ Opcode::prefix##_##name as usize] = OpcodeDescriptor { \
        __VA_ARGS__, \
        ..OpcodeDescriptor::new( #altname, isa_version_min, isa_exten ) \
    } .check_panic_chain();

#define RAB_DEF_OPCODE(prefix, case_bits, name, isa_version_min, isa_exten, ...) \
    RAB_DEF_OPCODE_ALTNAME(prefix, case_bits, name, name, isa_version_min, isa_exten, __VA_ARGS__)

#define RAB_DEF_OPCODE_PSEUDO(prefix, name, isa_version_min, isa_exten, ...) \
    RAB_DEF_OPCODE_ALTNAME(prefix, , name, name, isa_version_min, isa_exten, __VA_ARGS__, is_pseudo: true)

#define RAB_DEF_OPCODE_REDIRECT(case_bits, prefix, kind)
#define RAB_DEF_OPCODE_REMOVED(case_bits, prefix, name, isa_version_min, isa_exten)

use crate::operands::Operand;
use crate::opcodes::{Opcode, OpcodeDescriptor, OPCODE_COUNT};
use crate::isa::{IsaExtension, IsaVersion};
use crate::instruction::{InstrSuffix, InstrType};
use crate::AccessType;

pub static OPCODES: [OpcodeDescriptor; OPCODE_COUNT] = {
    let mut table = [OpcodeDescriptor::default(); OPCODE_COUNT];

    #include "Opcode.inc"

    let mut i = 0;
    while i < OPCODE_COUNT {
        table[i].check_panic();
        i += 1;
    }

    table
};

#undef RAB_DEF_OPCODE
#undef RAB_DEF_OPCODE_ALTNAME
#undef RAB_DEF_OPCODE_PSEUDO
#undef RAB_DEF_OPCODE_REDIRECT
#undef RAB_DEF_OPCODE_REMOVED
