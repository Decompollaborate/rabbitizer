/* SPDX-FileCopyrightText: Â© 2024-2025 Decompollaborate */
/* SPDX-License-Identifier: MIT */

#define HASH #
#define HASH_EXPANSION(x) x
#define SPECIAL_RS_TAG(...) HASH_EXPANSION(HASH)[__VA_ARGS__]


#define RAB_DEF_OPCODE(prefix, case_bits, name, isa_version_min, ...) \
    case_bits if isa_version as u32 >= IsaVersion:: isa_version_min as u32 => Opcode::prefix##_##name,

#define RAB_DEF_OPCODE_ALTNAME(prefix, case_bits, name, altname, isa_version_min, ...) \
    RAB_DEF_OPCODE(prefix, case_bits, name, isa_version_min, __VA_ARGS__)

#define RAB_DEF_OPCODE_PSEUDO(prefix, name, isa_version_min, ...)


#define RAB_DEF_OPCODE_EXTENSION(prefix, case_bits, name, isa_exten, ...) \
    what? This doesnt make sense

#define RAB_DEF_OPCODE_EXTENSION_ALTNAME(prefix, case_bits, name, altname, isa_exten, ...) \
    aaaaaaaaaa

#define RAB_DEF_OPCODE_EXTENSION_GATED(prefix, case_bits, name, isa_exten, gate, ...) \
    still doesnt make sense

#define RAB_DEF_OPCODE_EXTENSION_REMOVED(case_bits, prefix, name, isa_exten) \
    case_bits => Opcode::ALL_INVALID,


#define RAB_DEF_OPCODE_REDIRECT(case_bits, prefix, kind) \
    case_bits => return Self::decode_isa_extension_## prefix ##_## kind (word, mandatory_bits, flags, isa_version),

use crate::opcodes::{DecodingFlags, Opcode, OpcodeCategory, OpcodeDecoder};
use crate::isa::IsaVersion;
use crate::encoded_field_mask::EncodedFieldMask;

impl OpcodeDecoder {
    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_normal(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::opcode;
        let opcode_category = OpcodeCategory::CORE_NORMAL;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_normal.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode: Self::fixups_decode_isa_extension_none_normal(word, opcode, flags, isa_version),
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_special(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::function;
        let opcode_category = OpcodeCategory::CORE_SPECIAL;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_special.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode: Self::fixups_decode_isa_extension_none_special(word, opcode, flags, isa_version),
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_regimm(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::rt;
        let opcode_category = OpcodeCategory::CORE_REGIMM;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_regimm.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode: Self::fixups_decode_isa_extension_none_regimm(word, opcode, flags, isa_version),
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_coprocessor0(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::fmt;
        let opcode_category = OpcodeCategory::CORE_COP0;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_cop0.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_coprocessor0_bc0(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::bc_fmt;
        let opcode_category = OpcodeCategory::CORE_COP0_BC0;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_cop0_bc0.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_coprocessor0_tlb(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::function;
        let opcode_category = OpcodeCategory::CORE_COP0_TLB;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_cop0_tlb.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_coprocessor1(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::fmt;
        let opcode_category = OpcodeCategory::CORE_COP1;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_cop1.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_coprocessor1_bc1(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::bc_fmt;
        let opcode_category = OpcodeCategory::CORE_COP1_BC1;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_cop1_bc1.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_coprocessor1_fpu_s(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::function;
        let opcode_category = OpcodeCategory::CORE_COP1_FPUS;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_cop1_fpu_s.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_coprocessor1_fpu_d(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::function;
        let opcode_category = OpcodeCategory::CORE_COP1_FPUD;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_cop1_fpu_d.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_coprocessor1_fpu_w(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::function;
        let opcode_category = OpcodeCategory::CORE_COP1_FPUW;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_cop1_fpu_w.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_coprocessor1_fpu_l(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::function;
        let opcode_category = OpcodeCategory::CORE_COP1_FPUL;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_cop1_fpu_l.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_none_coprocessor2(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::fmt;
        let opcode_category = OpcodeCategory::CORE_COP2;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/core/core_cop2.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }
}

#undef RAB_DEF_OPCODE
#undef RAB_DEF_OPCODE_ALTNAME
#undef RAB_DEF_OPCODE_PSEUDO
#undef RAB_DEF_OPCODE_EXTENSION_REMOVED
#undef RAB_DEF_OPCODE_GATED

#undef RAB_DEF_OPCODE_EXTENSION
#undef RAB_DEF_OPCODE_EXTENSION_ALTNAME
#undef RAB_DEF_OPCODE_EXTENSION_GATED

#undef RAB_DEF_OPCODE_REDIRECT
