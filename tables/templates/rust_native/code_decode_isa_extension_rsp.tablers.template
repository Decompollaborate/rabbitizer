/* SPDX-FileCopyrightText: Â© 2024-2025 Decompollaborate */
/* SPDX-License-Identifier: MIT */

#define HASH #
#define HASH_EXPANSION(x) x
#define SPECIAL_RS_TAG(...) HASH_EXPANSION(HASH)[__VA_ARGS__]

#define RAB_DEF_OPCODE(prefix, case_bits, name, isa_version_min, isa_exten, ...) \
    case_bits => Opcode::prefix##_##name,

#define RAB_DEF_OPCODE_ALTNAME(prefix, case_bits, name, altname, isa_version_min, isa_exten, ...) \
    RAB_DEF_OPCODE(prefix, case_bits, name, isa_version_min, isa_exten, __VA_ARGS__)

#define RAB_DEF_OPCODE_PSEUDO(prefix, name, isa_version_min, isa_exten, ...)

#define RAB_DEF_OPCODE_REDIRECT(case_bits, prefix, kind) \
    case_bits => return Self::decode_isa_extension_## prefix ##_## kind (word, mandatory_bits, flags, isa_version),

#define RAB_DEF_OPCODE_REMOVED(case_bits, prefix, name, isa_version_min, isa_exten) \
    case_bits => Opcode::ALL_INVALID,

#define RAB_DEF_OPCODE_GATED(prefix, case_bits, name, isa_version_min, isa_exten, gate, ...) \
    case_bits => { gated_behind = Some(OpcodeValidityGate:: gate) ; Opcode::prefix##_##name },

#define RAB_DEF_OPCODE_EXTENSION(prefix, case_bits, name, isa_exten, ...) \
    RAB_DEF_OPCODE(prefix, case_bits, name, , Some(IsaExtension:: isa_exten ), __VA_ARGS__)

#define RAB_DEF_OPCODE_EXTENSION_ALTNAME(prefix, case_bits, name, altname, isa_exten, ...) \
    RAB_DEF_OPCODE(prefix, case_bits, name, , Some(IsaExtension:: isa_exten ), __VA_ARGS__)

#define RAB_DEF_OPCODE_EXTENSION_GATED(prefix, case_bits, name, isa_exten, gate, ...) \
    SPECIAL_RS_TAG(cfg(feature = #gate )) \
    RAB_DEF_OPCODE_GATED(prefix, case_bits, name, , Some(IsaExtension:: isa_exten ), gate, __VA_ARGS__)

use crate::encoded_field_mask::EncodedFieldMask;
use crate::isa::IsaVersion;
use crate::opcodes::{DecodingFlags, Opcode, OpcodeCategory, OpcodeDecoder};
SPECIAL_RS_TAG(cfg(feature = "RspViceMsp"))
use crate::opcodes::OpcodeValidityGate;

impl OpcodeDecoder {
    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_rsp_normal(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::opcode;
        let opcode_category = OpcodeCategory::RSP_NORMAL;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/rsp/rsp_normal.inc"
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_rsp_lwc2(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        _isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::rd;
        let opcode_category = OpcodeCategory::RSP_NORMAL_LWC2;
        SPECIAL_RS_TAG(allow(unused_mut))
        let mut gated_behind = None;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/rsp/rsp_normal_lwc2.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_rsp_swc2(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        _isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::rd;
        let opcode_category = OpcodeCategory::RSP_NORMAL_SWC2;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/rsp/rsp_normal_swc2.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_rsp_special(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::function;
        let opcode_category = OpcodeCategory::RSP_SPECIAL;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/rsp/rsp_special.inc"
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_rsp_regimm(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::rt;
        let opcode_category = OpcodeCategory::RSP_REGIMM;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/rsp/rsp_regimm.inc"
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_rsp_coprocessor0(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        _isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::fmt;
        let opcode_category = OpcodeCategory::RSP_COP0;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/rsp/rsp_cop0.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_rsp_coprocessor1(
        _word: u32,
        mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        _isa_version: IsaVersion,
    ) -> Self {
        let opcode_category = OpcodeCategory::RSP_COP1;

        let opcode = Opcode::ALL_INVALID;
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_rsp_coprocessor2(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        flags: &DecodingFlags,
        isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::fmt;
        let opcode_category = OpcodeCategory::RSP_COP2;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/rsp/rsp_cop2.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind: None,
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub(crate) const fn decode_isa_extension_rsp_coprocessor2_vu(
        word: u32,
        mut mandatory_bits: EncodedFieldMask,
        _flags: &DecodingFlags,
        _isa_version: IsaVersion,
    ) -> Self {
        let mask = EncodedFieldMask::function;
        let opcode_category = OpcodeCategory::RSP_COP2_VU;
        SPECIAL_RS_TAG(allow(unused_mut))
        let mut gated_behind = None;

        mandatory_bits = mandatory_bits.union(mask.mask_value(word));
        mandatory_bits = mandatory_bits.union(EncodedFieldMask::rsp_vu.mask_value(word));

        let opcode = match mask.get_shifted(word) {
#include "opcodes/rsp/rsp_cop2_vu.inc"
            _ => Opcode::ALL_INVALID,
        };
        Self {
            opcode,
            opcode_category,
            mandatory_bits,
            gated_behind,
        }
    }
}

#undef RAB_DEF_OPCODE
#undef RAB_DEF_OPCODE_ALTNAME
#undef RAB_DEF_OPCODE_PSEUDO
#undef RAB_DEF_OPCODE_REDIRECT
#undef RAB_DEF_OPCODE_REMOVED
#undef RAB_DEF_OPCODE_GATED
#undef RAB_DEF_OPCODE_EXTENSION_ALTNAME
#undef RAB_DEF_OPCODE_EXTENSION_GATED
