/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

#define HASH #
#define HASH_EXPANSION(x) x
#define SPECIAL_RS_TAG(...) HASH_EXPANSION(HASH)[__VA_ARGS__]

use core::num::NonZeroU16;

use crate::operands::{OperandDescriptor, IU16, OPERAND_COUNT, OperandDisplay, OperandDisplayCallback};
use crate::registers::*;
use crate::EncodedFieldMask;
use crate::{Vram, VramOffset};

#define RAB_DEF_OPERAND(prefix, operand, mask, values) \
    prefix##_##operand,

SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord))
SPECIAL_RS_TAG(allow(non_camel_case_types))
SPECIAL_RS_TAG(non_exhaustive)
pub enum Operand {
    #include "OperandTypes.inc"
}

#undef RAB_DEF_OPERAND

#define RAB_DEF_OPERAND(prefix, operand, mask, values) \
    table[ Operand::prefix##_##operand as usize] = \
        OperandDescriptor::new(concat!( #prefix, "_", #operand ), mask) \
    ;

pub static OPERANDS: [OperandDescriptor; OPERAND_COUNT] = {
    let mut table = [OperandDescriptor::default(); OPERAND_COUNT];

    #include "OperandTypes.inc"

    table
};

#undef RAB_DEF_OPERAND

#define RAB_DEF_OPERAND(prefix, operand, mask, values) \
    table[ Operand::prefix##_##operand as usize] = \
        OperandDisplay::display_ ## prefix ## _ ## operand; \
    count += 1;

pub(crate) static DISPLAY_OPERAND_CALLBACKS: [OperandDisplayCallback; OPERAND_COUNT] = {
    let mut table: [OperandDisplayCallback; OPERAND_COUNT] = [OperandDisplay::display_ALL_EMPTY; OPERAND_COUNT];
    let mut count = 0;

    #include "OperandTypes.inc"

    assert!(count == OPERAND_COUNT, "The OPERAND_COUNT constant and the actual count of operands doesn't match.");

    table
};

#undef RAB_DEF_OPERAND

#define RAB_DEF_OPERAND(prefix, operand, mask, values) \
    prefix##_##operand values,

SPECIAL_RS_TAG(derive(Debug, Copy, Clone, PartialEq, PartialOrd))
SPECIAL_RS_TAG(allow(non_camel_case_types))
SPECIAL_RS_TAG(non_exhaustive)
pub enum ValuedOperand {
    #include "OperandTypes.inc"
}

#undef RAB_DEF_OPERAND

#define RAB_DEF_OPERAND(prefix, operand, mask, values) \
    ValuedOperand:: prefix##_##operand (..) => Self:: prefix##_##operand,

impl Operand {
    SPECIAL_RS_TAG(must_use)
    pub const fn from_valued_operand(value: ValuedOperand) -> Self {
        match value {
            #include "OperandTypes.inc"
        }
    }
}

#undef RAB_DEF_OPERAND
