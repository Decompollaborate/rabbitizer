/* SPDX-FileCopyrightText: Â© 2024 Decompollaborate */
/* SPDX-License-Identifier: MIT */

#define HASH #
#define HASH_EXPANSION(x) x
#define SPECIAL_RS_TAG(...) HASH_EXPANSION(HASH)[__VA_ARGS__]

use core::fmt;
use core::num::NonZeroU16;

use crate::operands::{OperandDescriptor, IU16, OPERAND_COUNT, OperandDisplay};
use crate::registers::*;
use crate::vram::{Vram, VramOffset};
use crate::encoded_field_mask::EncodedFieldMask;

#define RAB_DEF_OPERAND(prefix, operand, mask, values) \
    prefix##_##operand,

SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord))
SPECIAL_RS_TAG(allow(non_camel_case_types))
SPECIAL_RS_TAG(non_exhaustive)
pub enum Operand {
    #include "OperandTypes.inc"
}

#undef RAB_DEF_OPERAND

#define RAB_DEF_OPERAND(prefix, operand, mask, values) \
    table[ Operand::prefix##_##operand as usize] = \
        OperandDescriptor::new(concat!( #prefix, "_", #operand ), mask) \
    ;

pub static OPERANDS: [OperandDescriptor; OPERAND_COUNT] = {
    let mut table = [OperandDescriptor::default(); OPERAND_COUNT];

    #include "OperandTypes.inc"

    table
};

#undef RAB_DEF_OPERAND

#define RAB_DEF_OPERAND(prefix, operand, mask, values) \
    Operand::prefix##_##operand => \
        OperandDisplay::display_ ## prefix ## _ ## operand (self, f), \

// The "// '" is a hack to prevent cpp from warning about unterminated literals
impl<T> OperandDisplay<'_, '_, T>
where T: fmt::Display
{
    pub(crate) fn display_this_operand(
        &self,
        f: &mut fmt::Formatter<'_>, // '
    ) -> fmt::Result {
        match self.operand() {
            #include "OperandTypes.inc"
        }
    }
}

#undef RAB_DEF_OPERAND

#define RAB_DEF_OPERAND(prefix, operand, mask, values) \
    prefix##_##operand values,

SPECIAL_RS_TAG(derive(Debug, Copy, Clone, PartialEq, PartialOrd))
SPECIAL_RS_TAG(allow(non_camel_case_types))
SPECIAL_RS_TAG(non_exhaustive)
pub enum ValuedOperand {
    #include "OperandTypes.inc"
}

#undef RAB_DEF_OPERAND

#define RAB_DEF_OPERAND(prefix, operand, mask, values) \
    ValuedOperand:: prefix##_##operand (..) => Self:: prefix##_##operand,

impl Operand {
    SPECIAL_RS_TAG(must_use)
    pub const fn from_valued_operand(value: ValuedOperand) -> Self {
        match value {
            #include "OperandTypes.inc"
        }
    }
}

#undef RAB_DEF_OPERAND
