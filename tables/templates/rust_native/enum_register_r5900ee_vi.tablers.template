/* SPDX-FileCopyrightText: Â© 2024-2025 Decompollaborate */
/* SPDX-License-Identifier: MIT */

#define HASH #
#define HASH_EXPANSION(x) x
#define SPECIAL_RS_TAG(...) HASH_EXPANSION(HASH)[__VA_ARGS__]

#define STR_EXPAND2(x) # x
#define STR_EXPAND(x) STR_EXPAND2(x)
#define STR(x) STR_EXPAND(x)

use crate::register_descriptors::RegisterDescriptor;
use crate::registers_meta::IntRegisterConversionError;
use core::ops::Index;

#define REGISTER_ENUM_NAME R5900EEVI
#define REG_NAME(name) name

#define RABBITIZER_DEF_REG(prefix, name, value, ...) \
    REG_NAME(name) = value,

SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord))
SPECIAL_RS_TAG(allow(non_camel_case_types))
SPECIAL_RS_TAG(allow(clippy::exhaustive_enums))
pub enum REGISTER_ENUM_NAME {
    #include "registers/RabbitizerRegister_R5900EEVI.inc"
}

#undef RABBITIZER_DEF_REG

#define RABBITIZER_DEF_REG(prefix, name, value, ...) \
    table[ REGISTER_ENUM_NAME :: REG_NAME(name) as usize] = RegisterDescriptor { \
        __VA_ARGS__ \
        ..RegisterDescriptor::new( concat!("$", #name), value, concat!("$vi", #value), true) \
    } .check_panic_chain();

#define REGISTER_COUNT 32

pub static R5900EE_VI: [RegisterDescriptor; REGISTER_COUNT] = {
    let mut table = [RegisterDescriptor::default(); REGISTER_COUNT];

    #include "registers/RabbitizerRegister_R5900EEVI.inc"

    let mut i = 0;
    while i < REGISTER_COUNT {
        assert!(table[i].value() as usize == i, "Broken register index?");

        i += 1;
    }

    table
};

#undef RABBITIZER_DEF_REG

#define RABBITIZER_DEF_REG(prefix, name, value, ...) \
    value => Ok(Self:: REG_NAME(name)),

impl REGISTER_ENUM_NAME {
    pub const fn try_from_u32(value: u32) -> Result<Self, IntRegisterConversionError> {
        match value {
            #include "registers/RabbitizerRegister_R5900EEVI.inc"
            x => Err(IntRegisterConversionError::new_out_of_range(x, REGISTER_COUNT, STR(REGISTER_ENUM_NAME))),
        }
    }

    SPECIAL_RS_TAG(must_use)
    pub const fn count() -> usize {
        REGISTER_COUNT
    }
}

#undef RABBITIZER_DEF_REG

impl TryFrom<u32> for REGISTER_ENUM_NAME {
    type Error = IntRegisterConversionError;

    fn try_from(value: u32) -> Result<Self, Self::Error> {
        Self::try_from_u32(value)
    }
}

impl Default for REGISTER_ENUM_NAME {
    fn default() -> Self {
        Self::default()
    }
}

impl Index<REGISTER_ENUM_NAME> for [RegisterDescriptor] {
    type Output = RegisterDescriptor;

    fn index(&self, index: REGISTER_ENUM_NAME) -> &Self::Output {
        &self[index as usize]
    }
}

SPECIAL_RS_TAG(cfg(test))
mod tests {
    use super::*;

    SPECIAL_RS_TAG(test)
    fn check_dollar() {
        for x in &R5900EE_VI {
            if x.has_dollar {
                assert!(x.name.starts_with('$'), "Register {} is missing dollar sign", x.name);
                assert!(x.name_o32.is_none_or(|x| x.starts_with('$')), "Register {:?} is missing dollar sign", x.name_o32);
                assert!(x.name_o64.is_none_or(|x| x.starts_with('$')), "Register {:?} is missing dollar sign", x.name_o64);
                assert!(x.name_n32.is_none_or(|x| x.starts_with('$')), "Register {:?} is missing dollar sign", x.name_n32);
                assert!(x.name_n64.is_none_or(|x| x.starts_with('$')), "Register {:?} is missing dollar sign", x.name_n64);
                assert!(x.name_eabi32.is_none_or(|x| x.starts_with('$')), "Register {:?} is missing dollar sign", x.name_eabi32);
                assert!(x.name_eabi64.is_none_or(|x| x.starts_with('$')), "Register {:?} is missing dollar sign", x.name_eabi64);
            } else {
                assert!(!x.name.starts_with('$'), "Register {} has dollar sign when it shouldn't", x.name);
                assert!(x.name_o32.is_none_or(|x| !x.starts_with('$')), "Register {:?} has dollar sign when it shouldn't", x.name_o32);
                assert!(x.name_o64.is_none_or(|x| !x.starts_with('$')), "Register {:?} has dollar sign when it shouldn't", x.name_o64);
                assert!(x.name_n32.is_none_or(|x| !x.starts_with('$')), "Register {:?} has dollar sign when it shouldn't", x.name_n32);
                assert!(x.name_n64.is_none_or(|x| !x.starts_with('$')), "Register {:?} has dollar sign when it shouldn't", x.name_n64);
                assert!(x.name_eabi32.is_none_or(|x| !x.starts_with('$')), "Register {:?} has dollar sign when it shouldn't", x.name_eabi32);
                assert!(x.name_eabi64.is_none_or(|x| !x.starts_with('$')), "Register {:?} has dollar sign when it shouldn't", x.name_eabi64);
            }
        }
    }
}
