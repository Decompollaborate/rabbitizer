/* SPDX-FileCopyrightText: Â© 2022-2023 Decompollaborate */
/* SPDX-License-Identifier: MIT */

#define HASH #
#define HASH_EXPANSION(x) x
#define SPECIAL_RS_TAG(...) HASH_EXPANSION(HASH)[__VA_ARGS__]

#define RABBITIZER_DEF_REG(prefix, name, numeric, ...) \
    name,

#define RABBITIZER_DEF_REG_NODOLLAR(prefix, name, numeric, ...) \
    RABBITIZER_DEF_REG(prefix, name, numeric)

pub mod registers {
    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum GprO32 {
        #include "registers/RabbitizerRegister_GprO32.inc"
    }

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum GprN32 {
        #include "registers/RabbitizerRegister_GprN32.inc"
    }

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum Cop0 {
        #include "registers/RabbitizerRegister_Cop0.inc"
    }

    // Float registers
    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum Cop1O32 {
        #include "registers/RabbitizerRegister_Cop1O32.inc"
    }

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum Cop1N32 {
        #include "registers/RabbitizerRegister_Cop1N32.inc"
    }

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum Cop1N64 {
        #include "registers/RabbitizerRegister_Cop1N64.inc"
    }

#undef RABBITIZER_DEF_REG

#define RABBITIZER_DEF_REG(prefix, name, numeric, ...) \
    prefix##_##name,

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum Cop1Control {
        #include "registers/RabbitizerRegister_Cop1Control.inc"
    }

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum Cop2 {
        #include "registers/RabbitizerRegister_Cop2.inc"
    }


    /* RSP */

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum RspGpr {
        #include "registers/RabbitizerRegister_RspGpr.inc"
    }

#undef RABBITIZER_DEF_REG

#define RABBITIZER_DEF_REG(prefix, name, numeric, ...) \
    name,

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum RspCop0 {
        #include "registers/RabbitizerRegister_RspCop0.inc"
    }

#undef RABBITIZER_DEF_REG

#define RABBITIZER_DEF_REG(prefix, name, numeric, ...) \
    prefix##_##name,

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum RspCop2 {
        #include "registers/RabbitizerRegister_RspCop2.inc"
    }

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum RspCop2Control {
        #include "registers/RabbitizerRegister_RspCop2Control.inc"
    }

#undef RABBITIZER_DEF_REG

#define RABBITIZER_DEF_REG(prefix, name, numeric, ...) \
    name,

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum RspVector {
        #include "registers/RabbitizerRegister_RspVector.inc"
    }

    /* RSP */

    /* R5900 */

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum R5900VF {
        #include "registers/RabbitizerRegister_R5900VF.inc"
    }

    SPECIAL_RS_TAG(repr(u32))
    SPECIAL_RS_TAG(derive(Debug, Copy, Clone, Hash, PartialEq, Eq))
    SPECIAL_RS_TAG(allow(non_camel_case_types))
    SPECIAL_RS_TAG(derive(num_enum::TryFromPrimitive, num_enum::IntoPrimitive))
    pub enum R5900VI {
        #include "registers/RabbitizerRegister_R5900VI.inc"
    }

    /* R5900 */
}

#undef RABBITIZER_DEF_REG
#undef RABBITIZER_DEF_REG_NODOLLAR
