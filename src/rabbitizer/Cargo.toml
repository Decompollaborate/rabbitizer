# SPDX-FileCopyrightText: Â© 2024-2025 Decompollaborate
# SPDX-License-Identifier: MIT

[package]
name = "rabbitizer"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
description = "MIPS instruction decoder"
readme = "README.md"
keywords = ["MIPS", "decoder"]
categories = ["no-std", "no-std::no-alloc"]
# build = "rust/build.rs"
# include = ["/rust/src", "/rust/build.rs", "/src", "/include", "/tables"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
path = "src/lib.rs"

[features]
default = []
std = []

# Encode string representation into an Instruction.
encoder = []

# Unsafe unchecked field accesses
unchecked_instr_fields = []

# TODO: Normalize capitalization
MIPS_II = [] # MIPS_I
MIPS_III = ["MIPS_II"]
MIPS_IV = ["MIPS_III"]

RSP = ["MIPS_III"]
R3000GTE = [] # MIPS_I
R4000ALLEGREX = ["MIPS_III", "dep:ordered-float"]
R5900EE = ["MIPS_IV"]

RspViceMsp = ["RSP"]

all_extensions = [
    "RSP",
    "R3000GTE",
    "R4000ALLEGREX",
    "R5900EE",
]

all_gated_extensions = [
    "all_extensions",
    "RspViceMsp",
]

serde = ["dep:serde"]
bindings_c = []
pyo3 = ["std", "dep:pyo3", "all_extensions", "all_gated_extensions"]

# Documentation should be generated with every user-facing feature
doc = ["MIPS_IV", "all_extensions", "all_gated_extensions", "encoder"]

[dependencies]
bitflags = { version = "2.6.0", default-features = false }
ordered-float = { version = "5.0.0", default-features = false, optional = true }
pyo3 = { version = "0.23.2", optional = true }
serde = { version = "1", features = ["derive"], default-features = false, optional = true }

[package.metadata.docs.rs]
# Build docs with the following flags to see how they should look on docs.rs.
# `RUSTFLAGS="--cfg docsrs" cargo +nightly doc -p rabbitizer -F doc --open`

# This should allow documenting parts of the crate that are not enabled by default
# https://docs.rs/about/metadata
features = ['doc']
# In theory this (in combination with `[cfg_attr(docsrs, feature(doc_cfg))]`
# and `[cfg_attr(docsrs, doc(cfg(feature = "encoder")))]`) allows to have a message
# specifying that something requires a specific feature to be available.
rustdoc-args = ["--cfg", "docsrs"]
